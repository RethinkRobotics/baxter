#!/usr/bin/env python

# Copyright (c) 2013, Rethink Robotics
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the Rethink Robotics nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import roslib
roslib.load_manifest('baxter_interface')

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

gen.add('goal_time', double_t, 0, "Amount of time (in seconds) that the \
    controller is permitted to be late to the goal.", 0.0, 0.0)
joints = ['left_s0', 'left_s1', 'left_e0', 'left_e1', 'left_w0', 'left_w1', \
    'left_w2', 'right_s0', 'right_s1', 'right_e0', 'right_e1', 'right_w0', \
    'right_w1', 'right_w2']
for joint in joints:
    gen.add(joint + '_goal', double_t, 0, "The maximum final error for " \
    + joint, -1.0, -1.0, 3.0)
    gen.add(joint + '_trajectory', double_t, 0, "The maximum error during \
        trajectory execution for " + joint, -1.0, -1.0, 3.0)
    gen.add(joint + '_kp', double_t, 0, joint + " proportional control gain", \
        2.0, 0.0)
    gen.add(joint + '_ki', double_t, 0, joint + " integral control gain", \
        0.0, 0.0)
    gen.add(joint + '_kd', double_t, 0, joint + " derivative control gain", \
        0.0, 0.0)

exit(gen.generate('baxter_interface', '', 'JointTrajectoryActionServer'))