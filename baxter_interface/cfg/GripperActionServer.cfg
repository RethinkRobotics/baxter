#!/usr/bin/env python

# Copyright (c) 2013, Rethink Robotics
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the Rethink Robotics nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import roslib
roslib.load_manifest('baxter_interface')

from dynamic_reconfigure.parameter_generator import (
    ParameterGenerator,
    double_t,
)

gen = ParameterGenerator()

joints = (
    'left_s0', 'left_s1', 'left_e0', 'left_e1', 'left_w0', 'left_w1',
    'left_w2', 'right_s0', 'right_s1', 'right_e0', 'right_e1', 'right_w0',
    'right_w1', 'right_w2',
    )

grippers = ('left_gripper', 'right_gripper') 

params = (
    '_timeout', '_goal', '_velocity', '_moving_force', '_holding_force',
    '_vacuum_threshold', '_blow_off',
    )

msg = (
    " - Timeout (Seconds) to achieve command or determined gripping",
    " - Electric Gripper - Maximum final error",
    " - Electric Gripper - Velocity",
    " - Electric Gripper - Force threshold. Grip achieved when surpassed.",
    " - Electric Gripper - Holding force applied when gripping/after motion.",
    " - Suction Gripper - Vacuum threshold. Grip achieved when surpassed.",
    " - Suction Gripper - When suction ceased, seconds of blown air.",
    )
min = (-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
default = (5.0, 5.0, 50.0, 40.0, 30.0, 18.0, 0.0)
max = (20.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0)

for gripper in grippers:
    for idx, param in enumerate(params):
        gen.add(
            gripper + param, double_t, 0, gripper + msg[idx],
            default[idx], min[idx], max[idx]
            )

exit(gen.generate('baxter_interface', '', 'GripperActionServer'))
